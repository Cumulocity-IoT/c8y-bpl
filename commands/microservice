#!/usr/bin/env bash
export LC_ALL=C.UTF-8
help() {
  cat <<EOF

----------------------------------------------------------------------------------------------------------
HELP MESSAGE:
    Usage: c8y bpl $(basename "$0") <commands> --id <microservice-id> [--tenant <tenant-id>]
    Commands:
      subscribe                 Subscribe tenant to microservice
      unsubscribe               Unsubscribe tenant to microservice
      help                      Show this help message and exit
    Arguments:
      -i, --id      ID          The ID of the application/microservice (required)
      -t, --tenant  TENANT_ID   The ID of the tenant
      -h, --help                Show this help message and exit

    Example usage:
    Subscribe current tenant to microservice with id 12345 oee-apama:
        c8y bpl subscribe --id 12345
    Subscribe current tenant to microservice with name oee-apama:
        c8y bpl subscribe --id "oee-apama"
    Subscribe tenant t1234 to microservice with name oee-apama:
        c8y bpl subscribe --id "oee-apama" --tenant "t1234"
    Unsubscribe current tenant to microservice with id 12345 oee-apama:
        c8y bpl unsubscribe --id 12345
    Unsubscribe current tenant to microservice with name oee-apama:
        c8y bpl unsubscribe --id "oee-apama"
    Unsubscribe tenant t1234 to microservice with name oee-apama:
        c8y bpl unsubscribe --id "oee-apama" --tenant "t1234"
----------------------------------------------------------------------------------------------------------

EOF
}
get_microservice_info() {
  local id="$1"
  local output=$(c8y microservices get --id "$id" 2>&1)
  local name=$(echo "$output" | sed -n 's/.*"name":"\([^"]*\).*/\1/p')
  local type=$(echo "$output" | sed -n 's/.*"type":"\([^"]*\).*/\1/p')
  local type_lowercase=$(echo "$type" | tr '[:upper:]' '[:lower:]')
}

subscribe() {
  local id=$1
  response=$(c8y microservices enable --id "$id" )
  if [[ -z $response ]]; then
    exit 1
  fi
  echo "Subscribed successfully."

  exit 0
}

subscribe_with_tenant_id() {
  local id=$1
  local tenant_id=$2

  response=$(c8y tenants enableApplication --tenant "$tenant_id" --application "$id")
  if [[ -z $response ]]; then
    exit 1
  fi

  echo "Subscribed successfully."
  exit 0
}

unsubscribe() {
  local id=$1
  response=$(c8y microservices disable --id "$id")
  exit_code=$?
  if [ $exit_code -eq 0 ]; then
    echo "Unsubscribed successfully."
    exit 0
  else
    echo "An error occurred, can not finish unsubscribing process."
    exit 1
  fi
}

unsubscribe_with_tenant_id() {
  local id=$1
  local tenant_id=$2

  response=$(c8y tenants disableApplication --tenant "$tenant_id" --application "$id")
  if [[ -z $response ]]; then
    exit 1
  fi

  echo "Unsubscribed successfully."
  exit 0
}

command="$1"
shift

# Parse command-line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--id|-id)
      if [[ $# -gt 1 ]]; then
        id="$2"
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -t|--tenant|-tenant)
      if [[ $# -gt 1 ]]; then
        tenant="$2"
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -h|--help)
      help
      exit 0
      ;;
    *)
      echo "Invalid option or argument: $1" >&2
      help
      exit 1
      ;;
  esac
  shift
done

# Execute the command
case "$command" in
  subscribe)
    if [[ -z "$id" ]]; then
      echo "Option --id is required for the 'subscribe' command." >&2
      exit 1
    fi

    info=($(get_microservice_info "$id"))
    name="${info[0]}"
    type="${info[1]}"

    if [[ -z "$tenant" ]]; then
      echo "Subscribe application/microservice $name ($type) to current tenant $C8Y_TENANT"
      subscribe "$id"
    else
      echo "Subscribe application/microservice $name ($type) to tenant $tenant"
      subscribe_with_tenant_id "$id" "$tenant"
    fi
    ;;

  unsubscribe)
    if [[ -z "$id" ]]; then
      echo "Option --id is required for the 'unsubscribe' command." >&2
      exit 1
    fi
    info=($(get_microservice_info "$id"))
    name="${info[0]}"
    type="${info[1]}"

    if [[ -z "$tenant" ]]; then
      echo "Unsubscribe application/microservice $name ($type) to current tenant $C8Y_TENANT"
      unsubscribe "$id"
    else
      echo "Unsubscribe application/microservice $name ($type) to tenant $tenant"
      unsubscribe_with_tenant_id "$id" "$tenant"
    fi
    ;;

  help|-h|--help)
    help
    exit 0
    ;;

  *)
    echo "Invalid command." >&2
    help
    exit 1
    ;;
esac