#!/usr/bin/env bash

help() {
  cat <<EOF

----------------------------------------------------------------------------------------------------------
HELP MESSAGE:
    Usage: c8y bpl $(basename "$0") <command> --username <username> --password <password> --domain <domain-name>
    Commands:
      create                    Create new tenant
      help                      Show this help message and exit
    Arguments:
      -u, --username  USERNAME  The username for the new user (required)
      -p, --password  PASSWORD  The password for the new user ( Password must have at least 8 characters and no more than 32 and must contain only Latin characters) (required)
      -d, --domain    DOMAIN    The domain for new sub-tenant (will be included ".latest.stage.c8y.io" automatically. Can contain  lowercase letters, digits, and hyphens; minimum 2 characters) (required)
      -h, --help                Show this help message and exit

    Example usage:
    Create a user with global roles "OEE Admin" and "business":
        c8y bpl tenants create --username abctest --password Password.123 --domain dummy-oeeadmin
----------------------------------------------------------------------------------------------------------

EOF
}

create_subtenant() {
  local domain="$1"
  local username="$2"
  local password="$3"
  response=$(c8y tenants create --domain "$domain" --adminName "$username" --adminPass "$password" --company 'SAG' --contactName 'IoT Extensions' --data 'adminEmail=iot-analytics-mobile-accelerator@softwareag.com' --timeout 300000)
  if [[ -z $response ]]; then
    exit 1
  fi
  echo "New sub-tenant $username is created successfully."
  exit 0
}

command="$1"
shift

# Parse command-line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--domain|-domain)
      if [[ $# -gt 1 ]]; then
        domain="$2.latest.stage.c8y.io"
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -u|--username|-username)
      if [[ $# -gt 1 ]]; then
        username="$2"
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -p|--password|-password)
      if [[ $# -gt 1 ]]; then
        password="$2"
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -h|--help)
      help
      exit 0
      ;;
    *)
      echo "Invalid option or argument: $1" >&2
      help
      exit 1
      ;;
  esac
  shift
done

# Execute the command
case "$command" in
  create)
    missing_args=()
    if [[ -z "$domain" ]]; then
      missing_args+=(domain)
    fi
    if [[ -z "$username" ]]; then
      missing_args+=(username)
    fi
    if [[ -z "$password" ]]; then
      missing_args+=(password)
    fi

    if [[ ${#missing_args[@]} -gt 0 ]]; then
      message="Error: Missing options required for the 'create' command: ${missing_args[0]}"
      for (( i=1; i<${#missing_args[@]}; i++ )); do
        message+=", ${missing_args[$i]}"
      done
      echo "$message" >&2
      help
      exit 1
    fi

    create_subtenant "$domain" "$username" "$password"
    ;;

  help|-h|--help)
    help
    exit 0
    ;;

  *)
    echo "Invalid command." >&2
    help
    exit 1
    ;;
esac