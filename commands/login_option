#!/usr/bin/env bash

help() {
  cat <<EOF
----------------------------------------------------------------------------------------------------------
HELP MESSAGE:
    Usage: c8y bpl $(basename "$0") <command> <argument> [c8y-universal-arguments]
    Commands:
      remove_restriction        Removes the restriction that client (web browser, command line, etc.) cannot use BasicAuth as Authentication method
      help                      Show this help message and exit
    Arguments:
      -h, --help                Show this help message and exit
      [any c8y argument]        For example: --timeout 300s; --output json;
    Example usage:
    Remove authentication login restriction and timeout in 300 seconds:
        c8y bpl login_option remove_restriction --timeout 300s
----------------------------------------------------------------------------------------------------------
EOF
}

extract_id_and_type() {
    local json_string=$1

    # Remove leading/trailing whitespace
    local cleaned_string=${json_string#"{"}
    # Remove curly braces
    cleaned_string=${cleaned_string%"}"}

    # Extract the "id" value
    local id=$(grep -o '"id":"[^"]*' <<< "$cleaned_string" | cut -d":" -f2 | tr -d '"')

    # Extract the "providername" value
    local providerName=$(grep -o '"providername":"[^"]*' <<< "$cleaned_string" | cut -d":" -f2 | tr -d '"')

    # Create an array and add the values
    local result=()
    result+=("$id")
    result+=("$providerName")

    # Return the array
    echo "${result[@]}"
}

remove_restriction() {
  idAndProviderName=$(c8y api -n get $C8Y_HOST/tenant/loginOptions --filter "type like BASIC" --select "id,providerName" "$@")
  echo "idAndProviderName (should look something like '8caad89a-e1a2-4d28-8d31-ae194d3f1dbb,'): $idAndProviderName"
  output=$(extract_id_and_type "$idAndProviderName")
  # Extract the values from the array and remove whitespace
  id=$(echo "${output[0]}" | tr -d ' ')
  providerName=$(echo "${output[1]}" | tr -d ' ')

  # Print the extracted values individually
  echo "ID: $id" >&2
  echo "Provider Name: $providerName" >&2

  response=$(c8y api -n put $C8Y_HOST/tenant/loginOptions/$id --template "{type: 'BASIC', 'providerName': \"$providerName\", 'id': \"$id\", 'authenticationRestrictions': {'forbiddenClients': []}}" "$@")
  # Check fault if failed to send request
  if [[ -z $response ]]; then
    echo "Error: Failed to send request. No response from server." >&2
    exit 1
  fi

  # Check fault if request receives error message from server
  if [[ $response == *"serverError"* || -z $response ]]; then
    echo "$response"
    echo "Error: Failed to remove authorization restriction." >&2
    exit 1
  fi

  echo "Removed authorization restriction successfully"
  exit 0
}

command="$1"
shift

REST_ARGS=()
# Parse command-line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    --*)  # Capture options starting with "--"
      if [[ $# -gt 1 ]]; then
        REST_ARGS+=("$1 $2") # in case of arguments such as --timeout 300s
        shift
      else
        REST_ARGS+=("$1")
      fi
      ;;
    *)
      ;;
  esac
  shift
done
set -- "${REST_ARGS[@]}" # Get all remain arguments which is not listed in the cases above

# Execute the command
case "$command" in
  remove_restriction)
    missing_args=()
    remove_restriction "$@"
    ;;

  help|-h|--help)
    help
    exit 0
    ;;

  *)
    echo "Invalid command." >&2
    help
    exit 1
    ;;
esac